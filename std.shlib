#!/bin/bash

std_shlib_version=2

#
# Global variables
#

export verbose=false
export debug=false
export dry_run=false
export help=false

#
# Activated by --verbose|-v. Relies on a "verbose" global variable
#
function debug
{
    ${verbose} && echo "$@" 1>&2;
    return 0
}

#
# Send error information at stderr and exit. The return code is 255.
#
function fail
{
    echo "[error]: $@" 1>&2 && exit 255
}

#
# Activated by --verbose|-v. Relies on a "verbose" global variable.
#
# Usage:
#
#        debug-arguments "$@"
#
# It is important to double-quote the argument, otherwise the empty arguments won't be displayed.
# TODO: Tested on Mac, must also test on Linux, cygwin
#
function debug-arguments
{
    local first=$1 # placeholder, to avoid IDE warnings
    local args
    if ${verbose}; then
        for arg do
            #
            # this is how we mask passwords
            #
            if [ "--aws-secret-key" = "${arg}" ]; then
                arg="--aws-secret-key ***"
            fi

            [ -z "${arg}" ] && arg="\"\""

            if [ -z "${args}" ]; then
                args="${arg}"
            else
                args="${args}, ${arg}"
            fi
        done
        echo "${FUNCNAME[1]}(${args})" 1>&2;
    fi
    return 0
}

#
# Send info at stderr (not to interfere with function returns)
#
function info
{
    echo "$@" 1>&2;
    return 0
}

#
# Send a warning at stderr (not to interfere with function returns)
#
function warn
{
    echo "[warning]: $@" 1>&2;
    return 0
}

#
# Send a TODO message at stderr (not to interfere with function returns)
#
function todo
{
    echo "[TODO]: $@" 1>&2;
    return 0
}

#
# Send error information at stderr (but not exit)
#
function error
{
    echo "[error]: $@" 1>&2;
    return 0
}

#
# Asks the question and it expects a y/n answer. If the answer starts with 'y', returns 0, otherwise it returns 1
#
# Usage example:
#
#   yes "do this?" || { info "we did not want to do this, nothing changed"; return 0; }
#
function yes
{
    echo -n "$@ [y/n] " 1>&2;
    read line
    [ "${line:0:1}" = "y" ] && return 0 || return 1
}

#
# displays the arguments at stderr as [dry-run]. Does NOT exit.
#
function dry-run
{
    echo "[dry-run]: $@" 1>&2;
    return 0
}
#
# Process common options setting and exporting global variables (so these values are passed to sub-shells). There is no
# way (or I don't know of any way) to modify the caller's positional parameters as to remove the parameters processed
# by this function, but it sets an "args" global variable that contains the remaining parameters, so you can use that.
#
# Note that if you need to convert exported global variables back into common command line arguments (to pass them
# over ssh, for example), use 'serialize-common-arguments' function.
#
# The function will remove only the first occurence of --verbose, -v, --debug because lower layers may need the second
# occurence - as a command parameter of its own, for example
#
#
# Usage:
#           process-common-options $@
#
#           for i in ${args}; do
#               # process remaining parameters as ${i}
#           done
#
# Option Handled       Global Variable Set      Notes
#
# --verbose            export verbose=true
# -v                   export verbose=true
#
# --debug              export verbose=true      This should be used when we want to debug the process with a debugger
#                      export debug=true
#
# --dry-run            export dry_run=true
#
# --help               export help=true
# -h                   export help=true
#
function process-common-arguments
{
    debug-arguments $@
    args=""

    while [ $# -gt 0 ]; do
        if ! ${verbose} && [ "$1" = "--verbose" -o "$1" = "-v" ]; then
            export verbose=true
            # the second --verbose|-v will go into arguments
        elif ! ${verbose} && [ "$1" = "--debug" ]; then
            export verbose=true
            # we need to set this to pass it to sub-processes as argument
            export debug=true
            # the second --debug will go into arguments
        elif [ "$1" = "--dry-run" ]; then
            export dry_run=true
        elif [ "$1" = "-h" -o "$1" = "--help" ]; then
            export help=true
        else
            [ "${args}" = "" ] && args=$1 || args="${args} $1"
        fi
        shift
    done
}

########################################################################################################################
# File Operations
########################################################################################################################

#
# move <source-file> <destination-file>
#
# Overwrite the destination-file with the source-file *only if the files differ*. The default behavior is to
# remove the source file upon success.
#
# If the files are identical, fail.
#
# Note that this behavior is built-in into replace-regex and replace-regex-line, so use those with priority.
#
function move()
{
    local src=$1
    local dest=$2

    [ "${src}" = "" ] && fail "no source file specified"
    [ -f ${src} ] || fail "no such file ${src}"
    [ "${dest}" = "" ] && fail "no destination file specified"
    [ -f ${dest} ] || fail "no such file ${dest}"

    diff ${src} ${dest} > /dev/null && fail "files ${src} and ${dest} are identical, no replacement was made"
    mv ${src} ${dest} || fail "failed to move ${src} over ${dest}"
}

########################################################################################################################
# END of File Operations
########################################################################################################################

########################################################################################################################
# regex Operations
########################################################################################################################

#
# Removes the whole line if it contains the regular expression
#
# Return 0 if something was actually removed or 1 if the file was not changed
#
# TODO add tests if I need to change it
#
function remove-regex-line()
{
    local regex=$1
    local file=$2
    local tmp=$(unique-file)
    sed -e '/'"${regex}"'/d' ${file} > ${tmp} || fail "fail to execute sed -e '/'${regex}'/d' on ${file}"
    diff ${file} ${tmp} > /dev/null && { rm ${tmp}; debug "${regex} not in ${file}"; return 1; } # identical files, no replacement made
    mv ${tmp} ${file} && { debug "line matching '${regex}' was removed from ${file}"; return 0; } || fail "failed to restore ${file}"
}

#
# Replaces source_regex with target_regex. The source_regex and target_regex will be used in the same sed expression,
# so \1 will work. It has the "move" functionality (see function move()) built-in.
#
# Example:
#
# replace-regex "^\(Defaults[ \t]*requiretty[ \t]*\)$" "#\1" /etc/sudoers
#
# Various character representation:
#
# "  \\\"
# /  \/
#
# The function returns 0 if the file was modified and 1 if no modification occured
#
function replace-regex()
{
    local source_regex=$1
    local target_regex=$2
    local file=$3

    local tmp=$(unique-file)
    sed -e 's/'"${source_regex}"'/'"${target_regex}"'/g' ${file} > ${tmp} || fail "fail to execute sed -e 's/'${source_regex}'/'"${target_regex}"'/g' on ${file}"
    diff ${file} ${tmp} > /dev/null && { rm ${tmp}; debug "${source_regex} not found in ${file}, no replacement was made"; return 1; } # identical files, no replacement made
    mv ${tmp} ${file} && { debug "'${source_regex}' replaced in ${file}"; return 0; } || fail "failed to restore ${file}"
}

#
# Insert the line at the specified line number.
# arg 1: line number
# arg 2: line.
# arg 3: file
function insert-at-line()
{
    local line_number=$1
    local line=$2
    local file=$3

    local tmp=$(unique-file)
    cat ${file} | sed -e ${line_number}'a\
'"${line}" > ${tmp} || fail "fail to append to line ${line_number} in ${file}"
    diff ${file} ${tmp} > /dev/null && { rm ${tmp}; debug "no insertion was made"; return 1; } # identical files, no replacement made
    mv ${tmp} ${file} && { debug "line inserted at ${line_number} in ${file}"; return 0; } || fail "failed to restore ${file}"
}

#
# Returns the number of the first line of the file containing the specified regular expressions.
# arg 1: regular expression
# arg 2: file
#
# return empty string if no such regex is found
#
function first-line-containing() {

    local regex=$1
    local file=$2

    local line_number=$(grep -n -m 1 "${regex}" ${file})
    line_number=${line_number%:*}
    echo ${line_number}
}

#
# Returns the number of the last line of the file containing the specified regular expressions.
# arg 1: regular expression
# arg 2: file
#
# return empty string if no such regex is found
#
function last-line-containing() {

    debug-arguments $@

    local regex=$1
    local file=$2

    local line_number=$(grep -n "${regex}" ${file} | tail -1)
    line_number=${line_number%:*}

    debug "last-line-containing: ${line_number}"
    echo ${line_number}
}

#
# returns the line with the specified line number at stdout (or empty string if no such line exists)
#
function line-at() {

    debug-arguments $@

    local line_number=$1
    local file=$2

    [ -f ${file} ] || fail "file ${file} not found"

    sed -n ${line_number}'p' ${file}
}

########################################################################################################################
# END of regex Operations
########################################################################################################################
